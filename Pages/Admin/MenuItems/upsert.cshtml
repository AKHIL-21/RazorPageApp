@page
@model RazorApp.Pages.Admin.MenuItems.UpsertModel
@{
}



<form method="post" enctype="multipart/form-data">
    <input asp-for="MenuItem.Id" hidden/>
   <div class="border p-3 mt-4">
      <div class="row pb-2">
          <div class="col-9">
                <h2 class="text-primary pl-3">
                    @(Model.MenuItem.Id!=0 ?"udpate" :"Create") Menu Item
                    </h2>
                <hr />

                <div asp-validation-summary="All" class="text-danger">

                </div>
                <div class="mb-3">
                    <label asp-for="MenuItem.Name"></label>
                    <input  asp-for="MenuItem.Name" class="form-control"/>
                    <span asp-validation-for="MenuItem.Name" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="MenuItem.Description"></label>
                    <textarea  asp-for="MenuItem.Description" class="form-control"></textarea>
                    <span asp-validation-for="MenuItem.Description" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="MenuItem.Price"></label>
                    <input asp-for="MenuItem.Price" class="form-control" />
                    <span asp-validation-for="MenuItem.Price" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="MenuItem.Image"></label>
                    <input type="file" name="files" id="uploadBox" class="form-control" />
            
                </div>
                <div class="mb-3">
                    <label asp-for="MenuItem.CategoryId"></label>
                    <select asp-for="MenuItem.CategoryId" asp-items="Model.CategoryList" class="form-select">
                        <option disabled selected>-Select Category-</option>
                    </select>
                    <span asp-validation-for="MenuItem.CategoryId" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="MenuItem.FoodtypeId"></label>
                    <select asp-for="MenuItem.FoodtypeId" asp-items="Model.FoodTypeList" class="form-select">
                        <option disabled selected>-Select FoodType-</option>
                    </select>
                    <span asp-validation-for="MenuItem.FoodtypeId" class="text-danger"></span>
                </div>
         </div>
      </div>

        
        <div class="col-3">
            @if(Model.MenuItem.Id != 0)
            {
                <img src="@Model.MenuItem.Image" width="100%" style="border-radius:5px"/>
            }
        </div>
    
      </div>   
    @if(Model.MenuItem.Id != 0)
    {
        <button type="submit" class="btn btn-primary" style="width:150px">Update</button>
    }
    else
    {
        <button type="submit" onclick="return ValidateInput()" class="btn btn-primary" style="width:150px">Create</button>
    }

            <a asp-page="Index" class="btn btn-primary" style="width:150px">Back To List</a>
  </div>
       
        
</form>

@section Scripts{
    @{
        
            <partial name="_ValidationScriptsPartial"/>
            <script>
            function ValidateInput(){
                if(document.getElementById("uploadBox").value==""){
                        Swal.fire({
                            icon: "error",
                            title: "Oops...",
                            text: "Please upload an Image!",
                            
                        });
                    return false;
                }
                return true;
            }
                tinymce.init({
                  selector: 'textarea',
                  plugins: [
                    // Core editing features
                    'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
                    // Your account includes a free trial of TinyMCE premium features
                    // Try the most popular premium features until Nov 21, 2024:
                    'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'advtemplate', 'ai', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown',
                    // Early access to document converters
                    'importword', 'exportword', 'exportpdf'
                  ],
                  toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
                  tinycomments_mode: 'embedded',
                  tinycomments_author: 'Author name',
                  mergetags_list: [
                    { value: 'First.Name', title: 'First Name' },
                    { value: 'Email', title: 'Email' },
                  ],
                  ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
                  exportpdf_converter_options: { 'format': 'Letter', 'margin_top': '1in', 'margin_right': '1in', 'margin_bottom': '1in', 'margin_left': '1in' },
                  exportword_converter_options: { 'document': { 'size': 'Letter' } },
                  importword_converter_options: { 'formatting': { 'styles': 'inline', 'resets': 'inline',	'defaults': 'inline', } },
                });
            </script>
    }
}